/*
 * SPDX-FileCopyrightText: 2025 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 * NOTE: This is an example component generated by Spartacus MCP Server
 * To use this component, ensure you have Angular and Spartacus dependencies installed
 */

import { HeroBannerConfig, HeroBannerTheme, HeroBannerCtaEvent } from './models/hero-banner.model';
import { HeroBannerService } from './hero-banner.service';

/**
 * Hero Banner Component
 * 
 * A responsive hero banner component with customizable content,
 * background images, and call-to-action buttons.
 * 
 * @example
 * ```html
 * <cx-hero-banner
 *   [title]="'Welcome to Our Store'"
 *   [subtitle]="'Discover amazing products'"
 *   [backgroundImage]="'/assets/hero-bg.jpg'"
 *   [ctaText]="'Shop Now'"
 *   [ctaLink]="'/products'"
 *   [theme]="'midnight'">
 * </cx-hero-banner>
 * ```
 */
export class HeroBannerComponent {
  // Component metadata (would be handled by @Component decorator)
  static readonly componentConfig = {
    selector: 'cx-hero-banner',
    templateUrl: './hero-banner.component.html',
    styleUrls: ['./hero-banner.component.scss'],
    changeDetection: 'OnPush',
    encapsulation: 'None'
  };

  // Host bindings (would be handled by @HostBinding decorators)
  readonly hostClass = true;
  readonly role = 'banner';
  
  get ariaLabel(): string {
    return this.title || 'Hero banner';
  }

  // Component inputs (would be handled by @Input decorators)
  config: HeroBannerConfig = {};
  title = '';
  subtitle = '';
  description = '';
  backgroundImage = '';
  ctaText = '';
  ctaLink = '/';
  secondaryCtaText = '';
  secondaryCtaLink = '';
  responsive = true;
  animated = true;
  theme: HeroBannerTheme = 'default';
  mobileContent = '';

  // Internal state
  private isDestroyed = false;
  private isLoading = false;

  // Public observables for template
  get loading$() {
    return {
      subscribe: (observer: any) => observer(this.isLoading),
      pipe: (...operators: any[]) => this.loading$
    };
  }

  get isMobile$() {
    return {
      subscribe: (observer: any) => observer(window.innerWidth < 768),
      pipe: (...operators: any[]) => this.isMobile$
    };
  }

  // Computed properties
  get backgroundImageStyle(): string {
    return this.backgroundImage ? `url(${this.backgroundImage})` : '';
  }

  get cssClasses(): string[] {
    const classes = ['cx-hero-banner'];
    
    if (this.responsive) classes.push('cx-hero-banner--responsive');
    if (this.animated) classes.push('cx-hero-banner--animated');
    if (this.theme !== 'default') classes.push(`cx-hero-banner--${this.theme}`);
    
    return classes;
  }

  constructor(private readonly heroBannerService: HeroBannerService) {
    // Component initialization
  }

  ngOnInit(): void {
    this.initializeConfiguration();
    this.setupResponsiveHandling();
  }

  ngOnDestroy(): void {
    this.isDestroyed = true;
  }

  // Event handlers
  onCtaClick(): void {
    if (this.ctaText && this.ctaLink) {
      const event: HeroBannerCtaEvent = {
        text: this.ctaText,
        link: this.ctaLink,
        position: 'primary',
        title: this.title
      };
      this.heroBannerService.trackCtaClick(event);
      this.navigateToLink(this.ctaLink);
    }
  }

  onSecondaryCtaClick(): void {
    if (this.secondaryCtaText && this.secondaryCtaLink) {
      const event: HeroBannerCtaEvent = {
        text: this.secondaryCtaText,
        link: this.secondaryCtaLink,
        position: 'secondary',
        title: this.title
      };
      this.heroBannerService.trackCtaClick(event);
      this.navigateToLink(this.secondaryCtaLink);
    }
  }

  // Private methods
  private initializeConfiguration(): void {
    this.isLoading = true;
    
    try {
      // Merge default config with component config
      const mergedConfig = this.mergeConfiguration(this.config);
      this.applyConfiguration(mergedConfig);
    } catch (error) {
      console.error('Error initializing hero banner configuration:', error);
    } finally {
      this.isLoading = false;
    }
  }

  private mergeConfiguration(config: HeroBannerConfig): HeroBannerConfig {
    // Default configuration
    const defaultConfig: HeroBannerConfig = {
      responsive: true,
      animated: true,
      theme: 'default',
      textAlign: 'center',
      size: 'large'
    };
    
    return { ...defaultConfig, ...config };
  }

  private applyConfiguration(config: HeroBannerConfig): void {
    // Apply configuration values to component properties
    Object.entries(config).forEach(([key, value]) => {
      if (value !== undefined && this.hasOwnProperty(key)) {
        (this as any)[key] = value;
      }
    });
  }

  private setupResponsiveHandling(): void {
    // Mock responsive handling
    if (typeof window !== 'undefined') {
      const handleResize = () => {
        if (!this.isDestroyed) {
          this.handleBreakpointChange(window.innerWidth < 768 ? 'mobile' : 'desktop');
        }
      };
      
      window.addEventListener('resize', handleResize);
      handleResize(); // Initial call
    }
  }

  private handleBreakpointChange(breakpoint: string): void {
    // Handle responsive behavior based on breakpoint
    const element = document.querySelector('.cx-hero-banner');
    if (element) {
      element.setAttribute('data-breakpoint', breakpoint);
    }
  }

  private navigateToLink(link: string): void {
    try {
      if (link.startsWith('http')) {
        // External link
        window.open(link, '_blank', 'noopener,noreferrer');
      } else {
        // Internal navigation would use Angular Router here
        console.log('Navigate to:', link);
      }
    } catch (error) {
      console.error('Navigation error:', error);
    }
  }

  // Utility methods for template
  hasContent(): boolean {
    return !!(this.title || this.subtitle || this.description);
  }

  hasActions(): boolean {
    return !!(this.ctaText || this.secondaryCtaText);
  }

  trackByIndex(index: number): number {
    return index;
  }

  // Template helper methods
  getBackgroundStyles(): { [key: string]: string } {
    const styles: { [key: string]: string } = {};
    
    if (this.backgroundImage) {
      styles['background-image'] = this.backgroundImageStyle;
      styles['background-size'] = 'cover';
      styles['background-position'] = 'center';
      styles['background-repeat'] = 'no-repeat';
    }
    
    return styles;
  }

  getCssClassString(): string {
    return this.cssClasses.join(' ');
  }
} 