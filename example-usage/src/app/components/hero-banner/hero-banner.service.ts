/*
 * SPDX-FileCopyrightText: 2025 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 * NOTE: This is an example service generated by Spartacus MCP Server
 */

import { HeroBannerConfig, HeroBannerCtaEvent } from './models/hero-banner.model';

/**
 * Hero Banner Service
 * 
 * Provides functionality for hero banner components including
 * configuration management, analytics tracking, and responsive handling.
 */
export class HeroBannerService {
  private readonly defaultConfig: HeroBannerConfig = {
    responsive: true,
    animated: true,
    theme: 'default',
    textAlign: 'center',
    size: 'large'
  };

  // Mock observable for mobile detection
  get isMobile$() {
    return {
      subscribe: (observer: any) => {
        const checkMobile = () => observer(window.innerWidth < 768);
        checkMobile();
        window.addEventListener('resize', checkMobile);
        return { unsubscribe: () => window.removeEventListener('resize', checkMobile) };
      },
      pipe: (...operators: any[]) => this.isMobile$
    };
  }

  /**
   * Track CTA click events for analytics
   * @param event - The CTA event details
   */
  trackCtaClick(event: HeroBannerCtaEvent): void {
    try {
      // Analytics tracking would go here
      console.log('Hero Banner CTA Click:', {
        text: event.text,
        link: event.link,
        position: event.position,
        title: event.title,
        timestamp: new Date().toISOString()
      });

      // Example: Send to analytics service
      // this.analyticsService.track('hero_banner_cta_click', event);
    } catch (error) {
      console.error('Error tracking CTA click:', error);
    }
  }

  /**
   * Merge configuration with defaults
   * @param config - User provided configuration
   * @returns Merged configuration
   */
  mergeConfiguration(config: HeroBannerConfig): HeroBannerConfig {
    return { ...this.defaultConfig, ...config };
  }

  /**
   * Setup responsive handling
   * @returns Observable for breakpoint changes
   */
  setupResponsiveHandling() {
    return {
      subscribe: (callbacks: any) => {
        const handleResize = () => {
          const breakpoint = this.getCurrentBreakpoint();
          if (callbacks.next) {
            callbacks.next(breakpoint);
          }
        };

        // Initial call
        handleResize();
        
        // Listen for resize events
        window.addEventListener('resize', handleResize);
        
        return {
          unsubscribe: () => window.removeEventListener('resize', handleResize)
        };
      },
      pipe: (...operators: any[]) => this.setupResponsiveHandling()
    };
  }

  /**
   * Get current breakpoint based on window width
   * @returns Current breakpoint name
   */
  private getCurrentBreakpoint(): string {
    if (typeof window === 'undefined') {
      return 'desktop';
    }

    const width = window.innerWidth;
    
    if (width < 576) return 'xs';
    if (width < 768) return 'sm';
    if (width < 992) return 'md';
    if (width < 1200) return 'lg';
    return 'xl';
  }

  /**
   * Validate hero banner configuration
   * @param config - Configuration to validate
   * @returns Validation result
   */
  validateConfiguration(config: HeroBannerConfig): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Validate required fields
    if (config.ctaText && !config.ctaLink) {
      errors.push('CTA link is required when CTA text is provided');
    }

    if (config.secondaryCtaText && !config.secondaryCtaLink) {
      errors.push('Secondary CTA link is required when secondary CTA text is provided');
    }

    // Validate theme
    const validThemes = ['default', 'dark', 'light', 'midnight', 'brand'];
    if (config.theme && !validThemes.includes(config.theme)) {
      errors.push(`Invalid theme: ${config.theme}. Valid themes are: ${validThemes.join(', ')}`);
    }

    // Validate size
    const validSizes = ['small', 'medium', 'large', 'full'];
    if (config.size && !validSizes.includes(config.size)) {
      errors.push(`Invalid size: ${config.size}. Valid sizes are: ${validSizes.join(', ')}`);
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Get optimized background image URL
   * @param imageUrl - Original image URL
   * @param breakpoint - Current breakpoint
   * @returns Optimized image URL
   */
  getOptimizedImageUrl(imageUrl: string, breakpoint: string): string {
    if (!imageUrl) return '';

    // Example optimization logic
    const sizeMap: { [key: string]: string } = {
      'xs': '480w',
      'sm': '768w',
      'md': '992w',
      'lg': '1200w',
      'xl': '1920w'
    };

    const size = sizeMap[breakpoint] || '1920w';
    
    // This would typically integrate with an image optimization service
    return imageUrl.includes('?') 
      ? `${imageUrl}&w=${size}&q=80&f=webp`
      : `${imageUrl}?w=${size}&q=80&f=webp`;
  }

  /**
   * Preload hero banner assets
   * @param config - Hero banner configuration
   */
  preloadAssets(config: HeroBannerConfig): void {
    if (config.backgroundImage) {
      const img = new Image();
      img.src = config.backgroundImage;
    }
  }
} 