/*
 * SPDX-FileCopyrightText: 2025 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 * NOTE: This is an example service generated by Spartacus MCP Server
 */

import { Product, ProductGridConfig, ProductFilter, ProductSortOption } from './models/product-grid.model';

/**
 * Product Grid Service
 * 
 * Provides functionality for product grid components including
 * product loading, filtering, sorting, and cart operations.
 */
export class ProductGridService {
  private readonly defaultConfig: ProductGridConfig = {
    columns: 4,
    showPrices: true,
    showRatings: true,
    showAddToCart: true,
    title: 'Featured Products',
    maxItems: 12,
    responsive: true,
    accessibility: true,
    enableFiltering: true,
    enablePagination: true,
    itemsPerPage: 12,
    showProductImages: true,
    showProductDescription: true,
    showStockStatus: true,
    theme: 'default',
    layout: 'grid'
  };

  /**
   * Get products with optional filtering
   * @param maxItems - Maximum number of products to return
   * @param filters - Optional filters to apply
   * @returns Array of products
   */
  getProducts(maxItems = 12, filters?: ProductFilter): Product[] {
    let products = this.getMockProducts();
    
    // Apply filters if provided
    if (filters) {
      products = this.applyFilters(products, filters);
    }
    
    return products.slice(0, maxItems);
  }

  /**
   * Sort products by specified criteria
   * @param products - Products to sort
   * @param sortBy - Sort criteria
   * @returns Sorted products array
   */
  sortProducts(products: Product[], sortBy: ProductSortOption): Product[] {
    const sortedProducts = [...products];
    
    switch (sortBy) {
      case 'name':
        return sortedProducts.sort((a, b) => a.name.localeCompare(b.name));
      case 'price_asc':
        return sortedProducts.sort((a, b) => a.price - b.price);
      case 'price_desc':
        return sortedProducts.sort((a, b) => b.price - a.price);
      case 'rating':
        return sortedProducts.sort((a, b) => (b.rating || 0) - (a.rating || 0));
      case 'newest':
        return sortedProducts.sort((a, b) => {
          const dateA = a.createdAt || new Date(0);
          const dateB = b.createdAt || new Date(0);
          return dateB.getTime() - dateA.getTime();
        });
      case 'popularity':
        return sortedProducts.sort((a, b) => (b.reviewCount || 0) - (a.reviewCount || 0));
      default:
        return sortedProducts;
    }
  }

  /**
   * Merge configuration with defaults
   * @param config - User provided configuration
   * @returns Merged configuration
   */
  mergeConfiguration(config: ProductGridConfig): ProductGridConfig {
    return { ...this.defaultConfig, ...config };
  }

  /**
   * Add product to cart
   * @param product - Product to add
   * @param quantity - Quantity to add
   */
  addToCart(product: Product, quantity = 1): void {
    try {
      // Analytics tracking
      console.log('Product added to cart:', {
        productId: product.id,
        productName: product.name,
        price: product.price,
        quantity,
        timestamp: new Date().toISOString()
      });
      
      // In a real implementation, this would integrate with Spartacus CartService
      // this.cartService.addEntry(product.id, quantity);
    } catch (error) {
      console.error('Error adding product to cart:', error);
    }
  }

  /**
   * Navigate to product detail page
   * @param productId - Product ID to navigate to
   */
  navigateToProduct(productId: string): void {
    try {
      // Analytics tracking
      console.log('Navigate to product:', {
        productId,
        timestamp: new Date().toISOString()
      });
      
      // In a real implementation, this would use Angular Router
      // this.router.navigate(['/product', productId]);
    } catch (error) {
      console.error('Error navigating to product:', error);
    }
  }

  /**
   * Search products by query
   * @param query - Search query
   * @param maxResults - Maximum results to return
   * @returns Filtered products
   */
  searchProducts(query: string, maxResults = 20): Product[] {
    const searchTerm = query.toLowerCase().trim();
    
    if (!searchTerm) {
      return this.getMockProducts().slice(0, maxResults);
    }
    
    return this.getMockProducts()
      .filter(product => 
        product.name.toLowerCase().includes(searchTerm) ||
        (product.description && product.description.toLowerCase().includes(searchTerm)) ||
        (product.brand && product.brand.toLowerCase().includes(searchTerm)) ||
        (product.category && product.category.toLowerCase().includes(searchTerm))
      )
      .slice(0, maxResults);
  }

  /**
   * Get products by category
   * @param category - Category to filter by
   * @param maxResults - Maximum results to return
   * @returns Filtered products
   */
  getProductsByCategory(category: string, maxResults = 20): Product[] {
    return this.getMockProducts()
      .filter(product => product.category === category)
      .slice(0, maxResults);
  }

  /**
   * Apply filters to products
   * @param products - Products to filter
   * @param filters - Filters to apply
   * @returns Filtered products
   */
  private applyFilters(products: Product[], filters: ProductFilter): Product[] {
    let filteredProducts = [...products];
    
    // Category filter
    if (filters.category && filters.category.length > 0) {
      filteredProducts = filteredProducts.filter(product => 
        product.category && filters.category!.includes(product.category)
      );
    }
    
    // Brand filter
    if (filters.brand && filters.brand.length > 0) {
      filteredProducts = filteredProducts.filter(product => 
        product.brand && filters.brand!.includes(product.brand)
      );
    }
    
    // Price range filter
    if (filters.priceRange) {
      filteredProducts = filteredProducts.filter(product => 
        product.price >= filters.priceRange!.min && 
        product.price <= filters.priceRange!.max
      );
    }
    
    // Rating filter
    if (filters.rating) {
      filteredProducts = filteredProducts.filter(product => 
        (product.rating || 0) >= filters.rating!
      );
    }
    
    // Availability filter
    if (filters.availability && filters.availability.length > 0) {
      filteredProducts = filteredProducts.filter(product => 
        product.availability && filters.availability!.includes(product.availability)
      );
    }
    
    return filteredProducts;
  }

  /**
   * Get mock products for demonstration
   * @returns Array of mock products
   */
  private getMockProducts(): Product[] {
    return [
      {
        id: 'prod-001',
        name: 'Premium Wireless Headphones',
        description: 'High-quality wireless headphones with noise cancellation',
        price: 299.99,
        originalPrice: 349.99,
        currency: 'USD',
        imageUrl: 'https://via.placeholder.com/300x300/1a1a1a/86BC24?text=Headphones',
        stock: 15,
        rating: 4.5,
        reviewCount: 128,
        category: 'Electronics',
        brand: 'TechBrand',
        sku: 'TB-WH-001',
        availability: 'in_stock',
        createdAt: new Date('2024-01-15'),
        tags: ['wireless', 'noise-cancelling', 'premium']
      },
      {
        id: 'prod-002',
        name: 'Smart Fitness Watch',
        description: 'Advanced fitness tracking with heart rate monitoring',
        price: 199.99,
        currency: 'USD',
        imageUrl: 'https://via.placeholder.com/300x300/1a1a1a/86BC24?text=Watch',
        stock: 8,
        rating: 4.2,
        reviewCount: 89,
        category: 'Electronics',
        brand: 'FitTech',
        sku: 'FT-SW-002',
        availability: 'limited',
        createdAt: new Date('2024-02-01'),
        tags: ['fitness', 'smartwatch', 'health']
      },
      {
        id: 'prod-003',
        name: 'Ergonomic Office Chair',
        description: 'Comfortable office chair with lumbar support',
        price: 449.99,
        currency: 'USD',
        imageUrl: 'https://via.placeholder.com/300x300/1a1a1a/86BC24?text=Chair',
        stock: 12,
        rating: 4.7,
        reviewCount: 156,
        category: 'Furniture',
        brand: 'ComfortPlus',
        sku: 'CP-OC-003',
        availability: 'in_stock',
        createdAt: new Date('2024-01-20'),
        tags: ['office', 'ergonomic', 'comfort']
      },
      {
        id: 'prod-004',
        name: 'Wireless Gaming Mouse',
        description: 'High-precision gaming mouse with RGB lighting',
        price: 79.99,
        currency: 'USD',
        imageUrl: 'https://via.placeholder.com/300x300/1a1a1a/86BC24?text=Mouse',
        stock: 25,
        rating: 4.3,
        reviewCount: 67,
        category: 'Electronics',
        brand: 'GameTech',
        sku: 'GT-GM-004',
        availability: 'in_stock',
        createdAt: new Date('2024-02-10'),
        tags: ['gaming', 'wireless', 'rgb']
      },
      {
        id: 'prod-005',
        name: 'Organic Cotton T-Shirt',
        description: 'Soft and comfortable organic cotton t-shirt',
        price: 29.99,
        currency: 'USD',
        imageUrl: 'https://via.placeholder.com/300x300/1a1a1a/86BC24?text=T-Shirt',
        stock: 0,
        rating: 4.1,
        reviewCount: 43,
        category: 'Clothing',
        brand: 'EcoWear',
        sku: 'EW-TS-005',
        availability: 'out_of_stock',
        createdAt: new Date('2024-01-05'),
        tags: ['organic', 'cotton', 'sustainable']
      },
      {
        id: 'prod-006',
        name: 'Professional Camera Lens',
        description: '85mm f/1.4 portrait lens for professional photography',
        price: 1299.99,
        currency: 'USD',
        imageUrl: 'https://via.placeholder.com/300x300/1a1a1a/86BC24?text=Lens',
        stock: 3,
        rating: 4.9,
        reviewCount: 234,
        category: 'Photography',
        brand: 'LensMaster',
        sku: 'LM-85-006',
        availability: 'limited',
        createdAt: new Date('2024-02-15'),
        tags: ['photography', 'professional', 'portrait']
      }
    ];
  }
} 